def q1(filename):
    grid = make_grid(filename)
    flashes = 0

    for i in range(100):
        increment_all(grid)
        flashes += flash_all(grid)
        post_flash_all(grid)

    string_grid = ''
    for row in grid:
        for octopus in row:
            string_grid += str(octopus.val)
        string_grid += '\n'
    print(f"Final grid:\n{string_grid}")
    print(f"Total flahses: {flashes}")


def q2(filename):
    grid = make_grid(filename)
    step = 1

    while True:
        increment_all(grid)
        flashes = flash_all(grid)
        if flashes == 100:
            break
        post_flash_all(grid)
        step += 1

    print(f"All flashed on step {step}")


def increment_all(grid):
    for row in grid:
        for octopus in row:
            octopus.increment()


def flash_all(grid):
    flashes = 0
    for i in range(len(grid)):
        for j in range(len(grid[i])):
            flashes += flash(grid, i, j)
    return flashes


def post_flash_all(grid):
    for row in grid:
        for octopus in row:
            octopus.post_flash()


def make_grid(filename):
    with open(filename) as f:
        return [[DumboOctopus(i) for i in list(line.strip())] for line in f.readlines()]


# returns the number of flashes generated by flashing the octopus at this cell, and its neighbors, and so on
def flash(grid, i, j):
    if i < 0 or j < 0 or i == len(grid) or j == len(grid[i]):
        return 0
    p = grid[i][j]

    if p.val < 10 or p.flashed:
        return 0

    p.flash()
    flash_sum = 1

    # adjacent in previous row, this row, and next row
    for x in range(max(0, i - 1), min(len(grid), i + 2)):
        for y in range(max(0, j - 1), min(len(grid[i]), j + 2)):
            if not (x == i and y == j):
                grid[x][y].increment()
                flash_sum += flash(grid, x, y)

    return flash_sum


class DumboOctopus(object):
    def __init__(self, char_val):
        self._val = int(char_val)
        self._flashed = False

    @property
    def val(self):
        return self._val

    @property
    def flashed(self):
        return self._flashed

    def increment(self):
        self._val += 1

    def flash(self):
        self._flashed = True

    def post_flash(self):
        if self._flashed:
            self._val = 0
            self._flashed = False


if __name__ == '__main__':
    q1('input.txt')
    q2('input.txt')